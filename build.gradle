plugins {
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
  id 'org.jetbrains.intellij' version "$ijpVersion"
}

version = "$pluginVersion"
defaultTasks "clean", "artifacts", "test"

repositories {
  mavenCentral()
}
apply plugin: "java"
apply plugin: "kotlin"

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = javaVersion
    apiVersion = kotlinApiVersion
  }
}
sourceSets {
  main {
    java.srcDirs "src", "gen"
    kotlin.srcDirs "src"
    resources.srcDirs "resources"
  }
  test {
    kotlin.srcDirs "tests"
  }
}
apply plugin: 'idea'
idea.module {
  generatedSourceDirs += file('gen')
}
apply plugin: "org.jetbrains.intellij"
intellij {
  version ideaVersion
  type "IC"
  plugins 'copyright', 'java'
  updateSinceUntilBuild false
  downloadSources = false
}
buildSearchableOptions.enabled = false

test {
  repositories {
    mavenCentral()
    maven { url "https://clojars.org/repo" }
  }
  dependencies {
    testRuntimeOnly "org.clojure:clojure:$clojureVersion"
    testRuntimeOnly "org.clojure:clojurescript:$cljsVersion"
    compileOnly files("${System.properties['java.home']}/../lib/tools.jar")
  }

  useJUnit {}
  include "**/*Test.class"
  scanForTestClasses false
  ignoreFailures true
  beforeTest { descriptor ->
    logger.lifecycle("Running ${descriptor}")
  }
}

task plugin_jar(type: Jar, dependsOn: [rootProject.tasks["assemble"]]) {
  archiveBaseName.set("clojure-kit")
  manifest { from "$rootDir/resources/META-INF/MANIFEST.MF" }
  from(rootProject.sourceSets.main.output)
}

task plugin_zip(type: Zip, dependsOn: [plugin_jar]) {
  archiveBaseName.set("ClojureKit")
  from(tasks["plugin_jar"].outputs) {
    into "/ClojureKit/lib"
  }
}

task artifacts(dependsOn: [plugin_jar, plugin_zip]) {}